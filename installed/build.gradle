apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Use AppCenter key
ext.appCenterKey = project.hasProperty('com.appcenter.key') ?
        project.getProperty('com.appcenter.key') :
        System.getenv('APPCENTER_KEY') ?: ''
// Use `com.nerdery.umbrella.darkskyapikey` in gradle.properties or as a command line
// parameter or `DARK_SKY_API_KEY` as a System Environment variable to provide dark
// sky api key to this project
ext.darkSkyApiKey = project.hasProperty('com.bitbybitlabs.darkskyapikey') ?
        project.getProperty('com.bitbybitlabs.darkskyapikey') :
        System.getenv('API_KEY') ?: ''

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.bitbybitlabs.life.installed"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "APPCENTER_KEY", "\"$project.appCenterKey\""
        buildConfigField "String", "API_KEY", "\"$project.darkSkyApiKey\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    signingConfigs {
        release {
            storeFile file("bitbybitlabs")
            storePassword project.hasProperty('com.bitbybitlabs.keystorePwd') ?
                    project.getProperty('com.bitbybitlabs.keystorePwd') :
                    System.getenv('$BITRISEIO_ANDROID_KEYSTORE_PASSWORD') ?: ''
            keyAlias project.hasProperty('com.bitbybitlabs.alias') ?
                    project.getProperty('com.bitbybitlabs.alias') :
                    System.getenv('$BITRISEIO_ANDROID_KEYSTORE_ALIAS') ?: ''
            keyPassword project.hasProperty('com.bitbybitlabs.keyPwd') ?
                    project.getProperty('com.bitbybitlabs.keyPwd') :
                    System.getenv('$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD') ?: ''
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dynamicFeatures = [":weather", ":finance"]

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':baselibrary')
    api 'com.microsoft.appcenter:appcenter-analytics:1.9.0'
    api 'com.microsoft.appcenter:appcenter-crashes:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha03'
    implementation "androidx.slice:slice-builders-ktx:1.0.0-alpha6"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'
}
